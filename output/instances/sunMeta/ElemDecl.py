from output.models.common.xsts_xsd.xlink import TypeType
from output.models.common.xsts_xsd.xsts import Annotation
from output.models.common.xsts_xsd.xsts import Current
from output.models.common.xsts_xsd.xsts import Documentation
from output.models.common.xsts_xsd.xsts import DocumentationReference
from output.models.common.xsts_xsd.xsts import Expected
from output.models.common.xsts_xsd.xsts import ExpectedOutcome
from output.models.common.xsts_xsd.xsts import InstanceDocument
from output.models.common.xsts_xsd.xsts import InstanceTest
from output.models.common.xsts_xsd.xsts import KnownToken
from output.models.common.xsts_xsd.xsts import Prior
from output.models.common.xsts_xsd.xsts import SchemaDocument
from output.models.common.xsts_xsd.xsts import SchemaTest
from output.models.common.xsts_xsd.xsts import Status
from output.models.common.xsts_xsd.xsts import TestGroup
from output.models.common.xsts_xsd.xsts import TestSet
from xsdata.formats.dataclass.models.generics import AnyElement
from xsdata.models.datatype import XmlDate


obj = TestSet(
    annotation=[],
    test_group=[
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Abstract declarations may not be used to validate element content. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element within a substitution group&#10;                             headed by another element which is abstract. The elements &#10;                             have the same type. Try to substitute the head element &#10;                             with the first one. Try to use the head itself.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/abstract/abstract00101m/abstract00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="abstract00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/abstract/abstract00101m/abstract00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="abstract00101m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/abstract/abstract00101m/abstract00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="abstract00101m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="abstract00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="use abstarct explicitly set to true  (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with abstarct explicitly set to true.&#10;                             Try to use it in the xml document.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/abstract/abstract00201m/abstract00201m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="abstract00201m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/abstract/abstract00201m/abstract00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="abstract00201m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="use abstarct explicitly set to false  (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with abstarct explicitly set to false.&#10;                             Try to use it in the xml document.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/abstract/abstract00201m/abstract00201m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="abstract00201m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/abstract/abstract00201m/abstract00201m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="abstract00201m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="use default value of the attribute abstract  (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with default value of the attribute abstract.&#10;                             Try to use it in the xml document.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/abstract/abstract00201m/abstract00201m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="abstract00201m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/abstract/abstract00201m/abstract00201m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="abstract00201m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="human-targeted  annotation for element declaration (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the human-targeted annotation &#10;                             is provided for an element declaration.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/annotation/annotation00101m/annotation00101m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/annotation/annotation00101m/annotation00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="annotation00101m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="human-targeted misplaced annotation for element declaration (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the human-targeted annotation &#10;                             is provided for an element declaration.&#10;                             The annotation is misplaced.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/annotation/annotation00101m/annotation00101m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="annotation00101m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="machine-targeted  annotation for element declaration (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the machine-targeted annotation &#10;                             is provided for an element declaration.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/annotation/annotation00101m/annotation00101m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/annotation/annotation00101m/annotation00101m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="annotation00101m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="machine-targeted misplaced annotation for element declaration (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the machine-targeted annotation &#10;                             is provided for an element declaration.&#10;                             The annotation is misplaced.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/annotation/annotation00101m/annotation00101m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="annotation00101m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Blocking any substitution. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element within a substitution group&#10;                             headed by another element. The elements have the same &#10;                             type. Block (disallow) a substitution of the head. Try &#10;                             to substitute the head element with the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00101m/disallowedSubst00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00101m/disallowedSubst00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="disallowedSubst00101m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00101m/disallowedSubst00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="disallowedSubst00101m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Blocking any substitution (positive case) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element within a substitution group&#10;                             headed by another element. The elements have the same &#10;                             type. Block (disallow) a substitution of the head. Try &#10;                             to substitute the head element with the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00102m/disallowedSubst00102m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00102m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00102m/disallowedSubst00102m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00102m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Blocking any substitution (negative case) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element within a substitution group&#10;                             headed by another element. The elements have the same &#10;                             type. Block (disallow) a substitution of the head. Try &#10;                             to substitute the head element with the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00102m/disallowedSubst00102m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00102m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00102m/disallowedSubst00102m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00102m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Blocking any extension. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element within a substitution group headed &#10;                             by another element. The first element has a type &#10;                             extended from the type of the head. Block (disallow) &#10;                             an extension of the head. Try to substitute&#10;                             the head element with the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00105m/disallowedSubst00105m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00105m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00105m/disallowedSubst00105m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="disallowedSubst00105m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00105m/disallowedSubst00105m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="disallowedSubst00105m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00105m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Blocking any extension (positive case) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element within a substitution group headed &#10;                             by another element. The first element has a type &#10;                             extended from the type of the head. Block (disallow) &#10;                             an extension of the head. Try to substitute&#10;                             the head element with the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00106m/disallowedSubst00106m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00106m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00106m/disallowedSubst00106m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00106m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Blocking any extension (negative case) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element within a substitution group headed &#10;                             by another element. The first element has a type &#10;                             extended from the type of the head. Block (disallow) &#10;                             an extension of the head. Try to substitute&#10;                             the head element with the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00106m/disallowedSubst00106m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00106m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00106m/disallowedSubst00106m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00106m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Illegal value is used. (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The block attribute is set to illegal value.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "substitution extension restriction #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "substitution extension restriction #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m10.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m10",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m10",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "extension substitution restriction #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "extension substitution restriction #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m11.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m11",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m11",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Various subsets of blocking values. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Various subsets of blocking values are used for a number of &#10;                             elemen declarations.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m12.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m12",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m12_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00202m12",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "#all #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "#all #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "substitution #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "substitution #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "restriction #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "restriction #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "extension #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "extension #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "substitution restriction #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "substitution restriction #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "extension substitution #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "extension substitution #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m7.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m7",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m7",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "restriction substitution #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "restriction substitution #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m8.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m8",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m8",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Try blocking "substitution restriction extension #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set block attribute to "substitution restriction extension #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00202m/disallowedSubst00202m9.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00202m9",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="disallowedsubst00202m9",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="substitution is allowed (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The blocking constraint must not contain substitution for an &#10;                             element declaration to be validly substituteable for another element &#10;                             declaration. &#10;                              In the test any substitution for element  Head  is &#10;                             allowed.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00301m/disallowedSubst00301m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00301m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00301m/disallowedSubst00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00301m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="substitution is disallowed (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The blocking constraint must not contain substitution for an &#10;                             element declaration to be validly substituteable for another element &#10;                             declaration. &#10;                              In the test any substitution for element  Head  is &#10;                             disallowed.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00301m/disallowedSubst00301m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00301m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00301m/disallowedSubst00301m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00301m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="substitution is allowed (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The blocking constraint must not contain substitution for an &#10;                             element declaration to be validly substituteable for another element &#10;                             declaration. &#10;                              In the test any substitution for element  Head  is &#10;                             allowed.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00401m/disallowedSubst00401m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00401m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00401m/disallowedSubst00401m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00401m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="substitution is disallowed (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The blocking constraint must not contain substitution for an &#10;                             element declaration to be validly substituteable for another element &#10;                             declaration. &#10;                              In the test any substitution for element  Head  is &#10;                             disallowed.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00401m/disallowedSubst00401m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00401m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00401m/disallowedSubst00401m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00401m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="no blocking constraints (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by restriction from type of the first element.&#10;                             Blockong constraints of the first element is empty, so the second element is substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00501m/disallowedSubst00501m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00501m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00501m/disallowedSubst00501m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00501m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="restriction is blocked (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by restriction from type of the first element.&#10;                             Blockong constraints of the first element contain 'restriction', so the second element is not substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00501m/disallowedSubst00501m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00501m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00501m/disallowedSubst00501m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00501m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="complex type substitution: no blocking constraints (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by extension from type of the first element.&#10;                             Blockong constraints of the first element is empty, so the second element is substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00502m/disallowedSubst00502m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00502m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00502m/disallowedSubst00502m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00502m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="complex type substitution: restriction is blocked (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by extension from type of the first element.&#10;                             Blockong constraints of the first element contain 'restriction', so the second element is substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00502m/disallowedSubst00502m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00502m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00502m/disallowedSubst00502m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00502m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="complex type substitution: extension is blocked (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by extension from type of the first element.&#10;                             Blockong constraints of the first element contain 'extension', so the second element is not substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00502m/disallowedSubst00502m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00502m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00502m/disallowedSubst00502m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00502m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="complex type substitution: extension and restriction are blocked (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by extension from type of the first element.&#10;                             Blockong constraints of the first element contain 'restriction extension', so the second element is not substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00502m/disallowedSubst00502m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00502m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00502m/disallowedSubst00502m4_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00502m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="derived by restriction: prohibiting substitutions is empty (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by restriction from type of the first element.&#10;                             Prohibiting substitutions of the first element's type is empty, so the second element is substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00503m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00503m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="derived by restriction: prohibiting substitutions contains 'extension' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by restriction from type of the first element.&#10;                             Prohibiting substitutions of the first element's type contain 'extension', so the second element is substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00503m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00503m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="derived by restriction: prohibiting substitutions contains 'restriction' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by restriction from type of the first element.&#10;                             Prohibiting substitutions of the first element's type contain 'restriction', so the second element is not substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00503m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00503m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="derived by restriction: prohibiting substitutions contains 'restriction extension' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by restriction from type of the first element.&#10;                             Prohibiting substitutions of the first element's type contain 'restriction extension', so the second element is not substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00503m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m4_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00503m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="derived by restriction: prohibiting substitutions contains '#all' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Two elements are declared. The second one has type derived by restriction from type of the first element.&#10;                             Prohibiting substitutions of the first element's type contain '#all', so the second element is not substitutable for the first one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="disallowedSubst00503m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/disallowedSubst/disallowedSubst00503m/disallowedSubst00503m5_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="disallowedsubst00503m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Uniqueness among values of elements. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define and check a uniqueness among values of elements.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00101m/idConstrDefs00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00101m/idConstrDefs00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00101m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00101m/idConstrDefs00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00101m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="all kinds of identity constraint are not violated (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define and check key, keyref and uniqueness among values of elements.&#10;                             In the test all kinds of identity constraint are not violated.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00201m/idConstrDefs00201m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00201m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00201m/idConstrDefs00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00201m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00201m/idConstrDefs00201m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00201m2_n",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00201m/idConstrDefs00201m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00201m3_n",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00201m/idConstrDefs00201m4_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00201m4_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00201m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="there must be no multiply-defined ID (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define a key identity constraint with two fields.&#10;                             Ensure that the constraint prevents one key to be&#10;                             defined twice.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00202m/idConstrDefs00202m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00202m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00202m/idConstrDefs00202m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00202m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00202m/idConstrDefs00202m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00202m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00202m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="there must be no uniqueness violations (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define a uniqueness identity constraint with two fields.&#10;                             Ensure that the constraint prevents one pair of values to be&#10;                             defined twice.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00203m/idConstrDefs00203m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00203m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00203m/idConstrDefs00203m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00203m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00203m/idConstrDefs00203m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00203m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00203m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="keyref must refer to a key that is defined (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define a key identity constraint. Define a keyref to that key.&#10;                             Ensure that the keyref field is not allowed to refer to a&#10;                             key that is not defined.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00204m/idConstrDefs00204m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00204m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00204m/idConstrDefs00204m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00204m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00204m/idConstrDefs00204m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00204m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00204m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="all ID, IDREF, IDREFS are valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="All ID, IDREF and IDREFS values are valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="../common/XSD1_1TestCategories.xml#xsd1_1-ID-IDREF-MultipleAttrsOfTypeID",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00301m/idConstrDefs00301m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00301m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00301m/idConstrDefs00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00301m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[
                        Annotation(
                            appinfo_or_documentation=[
                                Documentation(
                                    source=None,
                                    lang=None,
                                    other_attributes={},
                                    content=[
                                        AnyElement(
                                            qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                            text="The test:root element has two element children of type xs:ID. This is invalid in XSD 1.0. &#10;                  In XSD 1.1 the instance is valid, because multiple IDs for an element are now permitted.&#10;                ",
                                            tail=None,
                                            children=[],
                                            attributes={}
                                        ),
                                    ]
                                ),
                            ],
                            other_attributes={}
                        ),
                    ],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00301m/idConstrDefs00301m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[
                                KnownToken.VALUE_1_0,
                            ],
                            other_attributes={}
                        ),
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[
                                KnownToken.VALUE_1_1,
                            ],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00301m2_n",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00301m/idConstrDefs00301m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00301m3_n",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00301m/idConstrDefs00301m4_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00301m4_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00301m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="all attributes of type ID, IDREF, IDREFS are valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="All ID, IDREF and IDREFS attributes are valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00302m/idConstrDefs00302m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00302m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00302m/idConstrDefs00302m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00302m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00302m/idConstrDefs00302m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00302m2_n",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00302m/idConstrDefs00302m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00302m3_n",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00302m/idConstrDefs00302m4_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00302m4_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00302m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="derived IDREF must refer to an ID that is defined (cyclic) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an attribute of a type derived from ID. &#10;                             Declare an attribute of a type derived from IDREF. &#10;                             Ensure that the second attribute is allowed to refer to a value&#10;                             that is defined by the first attribute defined in the same &#10;                             element information item.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00401m/idConstrDefs00401m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00401m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00401m/idConstrDefs00401m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00401m1_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00401m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="derived IDREF must refer to an ID that is defined (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an attribute of a type derived from ID. &#10;                             Declare an attribute of a type derived from IDREF. &#10;                             Ensure that the second attribute is not allowed to refer to a value&#10;                             that is not defined by the first attribute.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00402m/idConstrDefs00402m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00402m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00402m/idConstrDefs00402m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00402m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00402m/idConstrDefs00402m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00402m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00402m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="derived IDREFS must refer to IDs that are defined (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an attribute of a type derived from ID. &#10;                             Declare an attribute of a type derived from IDREFS. &#10;                             Ensure that the second attribute is not allowed to refer to a values&#10;                             that are not defined by the first attribute.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00403m/idConstrDefs00403m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00403m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00403m/idConstrDefs00403m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00403m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00403m/idConstrDefs00403m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00403m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00403m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="there must be no multiply-defined ID (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an attribute of a type derived from ID. &#10;                             Ensure that two element information items&#10;                             may not have that attributes with the same values.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00501m/idConstrDefs00501m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="idConstrDefs00501m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00501m/idConstrDefs00501m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00501m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/identityConstraintDefs/idConstrDefs00501m/idConstrDefs00501m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="idConstrDefs00501m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="idconstrdefs00501m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Default value of the {maxOccurs} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define one global element and one local. Omit maxOccurs attribute. Check that&#10;                             the value of the {maxOccurs} property is 1.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/maxOccurs/maxOccurs00101m/maxOccurs00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="maxOccurs00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/maxOccurs/maxOccurs00101m/maxOccurs00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="maxOccurs00101m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/maxOccurs/maxOccurs00101m/maxOccurs00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="maxOccurs00101m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="maxoccurs00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Default value of the {maxOccurs} property when the ref attribute is used. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define one local that refers to a global one. Omit maxOccurs attribute. &#10;                             Check that the value of the {maxOccurs} property is 1.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/maxOccurs/maxOccurs00201m/maxOccurs00201m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="maxOccurs00201m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/maxOccurs/maxOccurs00201m/maxOccurs00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="maxOccurs00201m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/maxOccurs/maxOccurs00201m/maxOccurs00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="maxOccurs00201m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="maxoccurs00201m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Default value of the {minOccurs} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define one global element and one local. Omit minOccurs attribute. Check that&#10;                             the value of the {minOccurs} property is 1.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/minOccurs/minOccurs00101m/minOccurs00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="minOccurs00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/minOccurs/minOccurs00101m/minOccurs00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="minOccurs00101m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/minOccurs/minOccurs00101m/minOccurs00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="minOccurs00101m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="minoccurs00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Default value of the {minOccurs} property when the ref attribute is used. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare a local element with a reference to a global one. Omit minOccurs &#10;                             attribute. Check that the value of the {minOccurs} property is 1.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/minOccurs/minOccurs00201m/minOccurs00201m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="minOccurs00201m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/minOccurs/minOccurs00201m/minOccurs00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="minOccurs00201m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/minOccurs/minOccurs00201m/minOccurs00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="minOccurs00201m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="minoccurs00201m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="General check of the {name} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define two elements with incompatible types. Check that the &#10;                             elements are validated properly.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00101m/name00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00101m/name00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="name00101m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00101m/name00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="name00101m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="complexType definitions and element &#10;declarations have different symbol spaces. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element. Define a &#10;                              complexType  with the same name.&#10;                             Check that there is no name clash.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00201m/name00201m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00201m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00201m/name00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00201m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="simpleType definitions and element &#10;declarations have different symbol spaces. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element. Define a &#10;                              simpleType  with the same name.&#10;                             Check that there is no name clash.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00201m/name00201m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00201m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00201m/name00201m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00201m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Local element names do not clash. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare two local elements with the same name but in different &#10;                             scope.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00301m/name00301m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00301m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00301m/name00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00301m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="the name attribute is set (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set name="Local".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00401m/name00401m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00401m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00401m/name00401m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00401m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="the root attribute is set (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="root".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00401m/name00401m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00401m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00401m/name00401m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00401m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Both name and ref attributes are set (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set name="Local" ref="root".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00401m/name00401m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00401m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00401m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Both ref and name attributes are set (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="root" name="Local".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00401m/name00401m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00401m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00401m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Both name and ref attributes are set to the same value (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set name="root" ref="root".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00401m/name00401m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00401m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00401m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="nillable is present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set name ="Local" nillable="true" type="xsd:boolean".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00501m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="block and ref are present (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="Main" block="#all".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m10.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m10",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00501m10",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="type is present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set name ="Local" type="xsd:boolean".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m11.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m11",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m11_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00501m11",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="type and ref are present (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="Main" type="xsd:boolean".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m12.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m12",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00501m12",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="minOccurs and ref are present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="Main" minOccurs="0".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m13.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m13",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m13_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00501m13",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="maxOccurs and ref are present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="Main" maxOccurs="unbounded".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m14.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m14",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m14_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00501m14",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="id and ref are present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="Main" id="X123".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m15.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m15",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m15_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00501m15",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="nillable and ref are present (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="Main" nillable="true".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00501m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default is present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set name ="Local" default="true" type="xsd:boolean".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00501m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default and ref are present (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="Main" default="true".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00501m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed is present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set name ="Local" fixed="true" type="xsd:boolean".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m5_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00501m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed and ref are present (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="Main" fixed="true".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00501m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="form is present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set name ="Local" form="qualified" type="xsd:boolean".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m7.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m7",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m7_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00501m7",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="form and ref are present (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set ref="Main" form="qualified".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m8.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m8",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00501m8",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="block is present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set name ="Local" block="#all" type="xsd:boolean".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m9.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00501m9",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00501m/name00501m9_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00501m9",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with complex type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element using inline complex type definition.&#10;                             &#10;                             Check that the schema is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00502m/name00502m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00502m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00502m/name00502m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00502m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with complex type when ref attribute is used (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element using inline complex type definition.&#10;                             Set its  ref  attribute.&#10;                             Check that the schema is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00502m/name00502m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00502m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00502m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with simple type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element using inline simple type definition.&#10;                             &#10;                             Check that the schema is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00503m/name00503m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00503m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00503m/name00503m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00503m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with simple type when ref attribute is used (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element using inline simple type definition.&#10;                             Set its  ref  attribute.&#10;                             Check that the schema is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00503m/name00503m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00503m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00503m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with key (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with  key .&#10;                             &#10;                             Check that the schema is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00504m/name00504m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00504m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00504m/name00504m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00504m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with key when ref attribute is used (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with  key .&#10;                             Set its  ref  attribute.&#10;                             Check that the schema is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00504m/name00504m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00504m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00504m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with unique (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with  unique .&#10;                             &#10;                             Check that the schema is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00504m/name00504m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00504m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00504m/name00504m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00504m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with unique when ref attribute is used (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with  unique .&#10;                             Set its  ref  attribute.&#10;                             Check that the schema is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00504m/name00504m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00504m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00504m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with keyref (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with  keyref .&#10;                             &#10;                             Check that the schema is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00505m/name00505m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00505m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00505m/name00505m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00505m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element declaration with keyref when ref attribute is used (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with  keyref .&#10;                             Set its  ref  attribute.&#10;                             Check that the schema is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00505m/name00505m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00505m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="name00505m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The declaration must not be absent (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element  root . &#10;                             Use element information item with respect to the element declaration.&#10;                             The negative case uses undeclared element.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00601m/name00601m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00601m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00601m/name00601m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="name00601m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name00601m/name00601m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="name00601m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00601m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Element names contain several punctuation characters. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with a sequence of elements of type int. Name the elements&#10;                                     using 7 punctuation characters: &#10;                                     hyphen ('-', \u002D, HYPHEN-MINUS), period ('.', \u002E, FULL STOP),&#10;                                     underscore ('_', \u005F, LOW LINE),&#10;                                     dot ('.', \u00B7, MIDDLE DOT), \u0387, GREEK ANO TELEIA,&#10;                                     \u06DD, ARABIC END OF AYAH and \u06DE, ARABIC START OF RUB EL HIZB.&#10;                                     The document name00801_p.xml sets the elements to 0, 1, 2, ..., 6 respectively.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00801/name00801.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00801",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00801/name00801_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="name00801_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00801",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Element name contains 7 punctuation characters. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element with a sequence of two int elements. Name the first one&#10;                                     using 7 punctuation characters: &#10;                                     hyphen ('-', \u002D, HYPHEN-MINUS), period ('.', \u002E, FULL STOP),&#10;                                     underscore ('_', \u005F, LOW LINE),&#10;                                     dot ('.', \u00B7, MIDDLE DOT), \u0387, GREEK ANO TELEIA,&#10;                                     \u06DD, ARABIC END OF AYAH and \u06DE, ARABIC START OF RUB EL HIZB. Name the &#10;                                     second element with the same name except the characters described.&#10;                             &#10;                                     The document name00802_p.xml sets the elements to 0 and 1 respectively.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00802/name00802.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00802",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00802/name00802_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="name00802_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00802",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Element names contain digits followed by a non-digit characters. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element with a sequence of three integer elements. Name them &#10;                                     as follows: "aa111a2Aa", "aa22B3c", "aa3-4_".&#10;                                     The document name00803_p.xml sets the elements to 0, 1 and 2 respectively.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00803/name00803.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00803",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00803/name00803_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="name00803_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00803",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Element names contain lower case and upper case letters and non-letter characters. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element with a sequence of integer elements. Name them as follows:&#10;                                     "aaaa",  "bbbB",  "ccCc",  "ddDD",  "eEee",  &#10;                                     "fFfF",  "pPPp",  "gGGG",  "Hhhh",  "IiiI",  "JjJj", &#10;                                     "KkKK",  "LLll",  "MMmM",  "NNNn",  "OOOO", &#10;                                     "bbb0",  "cc0c",  "dd00",  "e0ee",  "f0f0",  "p00p",  "g000", &#10;                                     "bbb_",  "cc_c",  "dd__",  "e_ee",  "f_f_",  "p__p",  "g___", &#10;                                     "H111",  "I11I",  "J1J1",  "K1KK",  "LL11",  "MM1M",  "NNN1", &#10;                                     "H---",  "I--I",  "J-J-",  "K-KK",  "LL--",  "MM-M",  "NNN-". &#10;                             &#10;                                     The document name00804_p.xml sets all the elements.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00804/name00804.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00804",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00804/name00804_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="name00804_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00804",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Element names contain only punctuation characters and digits. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element with a sequence of two integer elements. Name the first one&#10;                                     as "_-." and the second one as "_-0.". &#10;                             &#10;                                     The document name00805_p.xml sets the attributes to 0 and 1 respectively.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00805/name00805.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="name00805",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/name/name008/name00805/name00805_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="name00805_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="name00805",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="nillable=false (positive case) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define nillable element with content type which requires &#10;                             content. Try nillable=false.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00101m/nillable00101m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nillable00101m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00101m/nillable00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nillable00101m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="nillable=false (negative case) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define nillable element with content type which requires &#10;                             content. Try nillable=false.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00101m/nillable00101m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nillable00101m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00101m/nillable00101m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nillable00101m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="xsi:nil=false (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define nillable element with content type which requires &#10;                             content. Try xsi:nil=false.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00102m/nillable00102m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nillable00102m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00102m/nillable00102m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="nillable00102m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00102m/nillable00102m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="nillable00102m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nillable00102m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="nillable=false and xsi:nil=true (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare a non-nillable element.  Try xsi:nil="true".The test is negative.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00201m/nillable00201m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nillable00201m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00201m/nillable00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="nillable00201m1_n",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00201m/nillable00201m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="nillable00201m2_n",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00201m/nillable00201m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="nillable00201m3_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nillable00201m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="the element information item must have no character if nil is specified (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare a nillable element. Set the element to be  nil .&#10;                             Negative case tries to have characters.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00301m/nillable00301m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nillable00301m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00301m/nillable00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="nillable00301m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00301m/nillable00301m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="nillable00301m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nillable00301m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="the element information item must have no element information children if nil is specified (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare a nillable element of a complex type. Set the element to be  nil .&#10;                             Negative case tries to have children.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00302m/nillable00302m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nillable00302m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00302m/nillable00302m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="nillable00302m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00302m/nillable00302m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="nillable00302m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nillable00302m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="there may be a fixed {value constraint} along with nillable set to true (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare a nillable element. The the second variant &#10;                             declares the element to have fixed value.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00401m/nillable00401m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nillable00401m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00401m/nillable00401m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nillable00401m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="there may be a fixed {value constraint} along with nillable set to true (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare a nillable element. The the second variant &#10;                             declares the element to have fixed value.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00401m/nillable00401m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nillable00401m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/nillable/nillable00401m/nillable00401m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nillable00401m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="General check of the {scope} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define one global element and one local.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/scope/scope00101m/scope00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="scope00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/scope/scope00101m/scope00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="scope00101m1_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="scope00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Locally scoped element (positive case). (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Using localy scoped element within the complex type.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/scope/scope00201m/scope00201m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="scope00201m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/scope/scope00201m/scope00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="scope00201m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Locally scoped element (negative case). (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Using localy scoped element within the complex type.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/scope/scope00201m/scope00201m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="scope00201m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="scope00201m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Scope of a named group. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define a group with two elements. Use the group in a &#10;                             complexType.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/scope/scope00301m/scope00301m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="scope00301m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/scope/scope00301m/scope00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="scope00301m1_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="scope00301m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="General check of the {substitution group affiliation} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define two elements within one substitution group&#10;                             and one outside the group.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupAffilation/substGrpAffil00101m/substGrpAffil00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpAffil00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupAffilation/substGrpAffil00101m/substGrpAffil00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="substGrpAffil00101m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupAffilation/substGrpAffil00101m/substGrpAffil00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="substGrpAffil00101m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpaffil00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Substitution group memebership is transitive but not symmetric. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element within a substitution group &#10;                             of another one. Then the last one within another&#10;                             group. Check the following: &#10;                              1. the first element substitutes the element of &#10;                                the second group&#10;                              2. the second element doesn't substitute &#10;                                the first one",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupAffilation/substGrpAffil00201m/substGrpAffil00201m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpAffil00201m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupAffilation/substGrpAffil00201m/substGrpAffil00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="substGrpAffil00201m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupAffilation/substGrpAffil00201m/substGrpAffil00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="substGrpAffil00201m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpaffil00201m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out extension substitutions (positive case). (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define three elements within one substitution group.&#10;                             The first has the same type, the second is derived&#10;                             as restriction and the third derived as extension. &#10;                             All the elments are the memebers of the substitution&#10;                             group. Try to rule out extension&#10;                             by means of {substitution group exclusions} property &#10;                             of the head element declaration.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00202m/substGrpExcl00202m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00202m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00202m/substGrpExcl00202m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00202m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out extension substitutions (negative case). (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define three elements within one substitution group.&#10;                             The first has the same type, the second is derived&#10;                             as restriction and the third derived as extension. &#10;                             All the elments are the memebers of the substitution&#10;                             group. Try to rule out extension&#10;                             by means of {substitution group exclusions} property &#10;                             of the head element declaration.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00202m/substGrpExcl00202m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00202m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="substgrpexcl00202m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out both restriction and extension substitutions (positive case). (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define one element within a substitution group headed by&#10;                             another element. The elements have the same type.&#10;                             Try to rule out both restriction and extension&#10;                             by means of {substitution group exclusions} property &#10;                             of the head element declaration. Try to substitute the&#10;                             head with the first element.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00301m/substGrpExcl00301m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00301m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00301m/substGrpExcl00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00301m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out both restriction and extension substitutions (positive case). (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define one element within a substitution group headed by&#10;                             another element. The elements have the same type.&#10;                             Try to rule out both restriction and extension&#10;                             by means of {substitution group exclusions} property &#10;                             of the head element declaration. Try to substitute the&#10;                             head with the first element.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00301m/substGrpExcl00301m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00301m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00301m/substGrpExcl00301m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00301m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out both restriction and extension substitutions (positive case). (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define one element within a substitution group headed by&#10;                             another element. The elements have the type extended&#10;                             from the type of the head element.&#10;                             Try to rule out both restriction and extension&#10;                             by means of {substitution group exclusions} property &#10;                             of the head element declaration. Try to substitute the&#10;                             head with the first element.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00303m/substGrpExcl00303m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00303m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00303m/substGrpExcl00303m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00303m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out both restriction and extension substitutions (negative case). (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define one element within a substitution group headed by&#10;                             another element. The elements have the type extended&#10;                             from the type of the head element.&#10;                             Try to rule out both restriction and extension&#10;                             by means of {substitution group exclusions} property &#10;                             of the head element declaration. Try to substitute the&#10;                             head with the first element.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00303m/substGrpExcl00303m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00303m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="substgrpexcl00303m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out both restriction and extension substitutions (positive case). (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define one element within a substitution group headed by&#10;                             another element. The elements have the type extended&#10;                             from the type of the head element.&#10;                             Try to rule out both restriction and extension&#10;                             by means of {substitution group exclusions} property &#10;                             of the head element declaration. Try to substitute the&#10;                             head with the first element.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00303m/substGrpExcl00303m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00303m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00303m/substGrpExcl00303m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00303m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out nothing (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Omit the finalDefault attribute.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00401m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00401m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out #all (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Set finalDefault attribute to "#all"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00401m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00401m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out restriction (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Set finalDefault attribute to "restriction"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00401m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00401m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out extension (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Set finalDefault attribute to "extension"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00401m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m4_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00401m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out extension restriction (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Set finalDefault attribute to "extension restriction"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00401m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m5_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00401m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Rule out restriction extension (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Set finalDefault attribute to "restriction extension"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00401m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00401m/substGrpExcl00401m6_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00401m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Illegal value is used. (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The final attribute is set to illegal value.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00402m/substGrpExcl00402m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00402m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="substgrpexcl00402m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Rule out "#all #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set final attribute to "#all #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00402m/substGrpExcl00402m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00402m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="substgrpexcl00402m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Rule out "restriction #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set final attribute to "restriction #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00402m/substGrpExcl00402m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00402m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="substgrpexcl00402m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Rule out "extension #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set final attribute to "extension #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00402m/substGrpExcl00402m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00402m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="substgrpexcl00402m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Rule out "extension restriction #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set final attribute to "extension restriction #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00402m/substGrpExcl00402m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00402m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="substgrpexcl00402m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text='Rule out "restriction extension #illegalValue" (invalid schema)',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Try to set final attribute to "restriction extension #illegalValue"',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00402m/substGrpExcl00402m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00402m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="substgrpexcl00402m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Various subsets of values for the final attribute. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Various subsets of the final attribute values are used for a number of &#10;                             elemen declarations.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00402m/substGrpExcl00402m7.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="substGrpExcl00402m7",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/substGroupExclusions/substGrpExcl00402m/substGrpExcl00402m7_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="substgrpexcl00402m7",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Different target namespaces. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define two elements with the same name in two different &#10;                             Namespaces. Make their content types incompatible.&#10;                             Check that validation takes into account the&#10;                             property {target namespace}.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00101m/targetNS00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00101m/targetNS00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="targetNS00101m1_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Absent values of {target namespace} validate unqualified items. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define unqualified element.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00201m/targetNS00201m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00201m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00201m/targetNS00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="targetNS00201m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00201m/targetNS00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="targetNS00201m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00201m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The form attribute is set to qualified. The elementFormDefault attribute is omitted. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Set the form attribute of the local element declaration to  qualified .&#10;                             Omit the elementFormDefault attribute.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00301m/targetNS00301m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00301m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00301m/targetNS00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00301m/targetNS00301m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00301m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The form attribute is set to unqualified. The elementFormDefault attribute is omitted. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Set the form attribute of the local element declaration to  unqualified .&#10;                             Omit the elementFormDefault attribute.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00301m/targetNS00301m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00301m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00301m/targetNS00301m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00301m/targetNS00301m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00301m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Both the form and elementFormDefault attributes are omitted.  (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Omit the form attribute of the local element declaration.&#10;                             Omit the elementFormDefault attribute.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00301m/targetNS00301m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00301m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00301m/targetNS00301m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00301m/targetNS00301m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00301m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The form attribute is set to qualified, the elementFormDefault is set to qualified. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Set the form attribute of the local element declaration to  qualified .&#10;                             Set the elementFormDefault to  qualified .",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00302m/targetNS00302m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00302m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00302m/targetNS00302m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00302m/targetNS00302m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00302m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The form attribute is set to unqualified, the elementFormDefault is set to qualified. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Set the form attribute of the local element declaration to  unqualified .&#10;                             Set the elementFormDefault to  qualified .",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00302m/targetNS00302m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00302m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00302m/targetNS00302m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00302m/targetNS00302m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00302m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The form attribute is omitted, the elementFormDefault is set to qualified. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Omit the form attribute of the local element declaration. &#10;                             Set the elementFormDefault to  qualified .",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00302m/targetNS00302m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00302m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00302m/targetNS00302m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00302m/targetNS00302m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00302m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The form attribute is set to qualified, the elementFormDefault is set to unqualified. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Set the form attribute of the local element declaration to  qualified .&#10;                             Set the elementFormDefault to  unqualified .",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00303m/targetNS00303m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00303m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00303m/targetNS00303m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00303m/targetNS00303m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00303m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The form attribute is set to unqualified, the elementFormDefault is set to unqualified. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Set the form attribute of the local element declaration to  unqualified .&#10;                             Set the elementFormDefault to  unqualified .",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00303m/targetNS00303m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00303m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00303m/targetNS00303m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00303m/targetNS00303m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00303m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The form attribute is omitted, the elementFormDefault is set to unqualified. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Omit the form attribute of the local element declaration. &#10;                             Set the elementFormDefault to  unqualified .",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00303m/targetNS00303m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00303m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00303m/targetNS00303m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00303m/targetNS00303m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00303m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Global elements must be qualified. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Element information items validated by a top-level declaration must &#10;                             be qualified with the {target namespace} of that declaration.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00401m/targetNS00401m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00401m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00401m/targetNS00401m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="targetNS00401m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00401m/targetNS00401m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="targetNS00401m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00401m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Global elements must be qualified. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If {target namespace} is  absent , element information items &#10;                             validated by a top-level declaration must be unqualified.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00402m/targetNS00402m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="targetNS00402m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00402m/targetNS00402m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="targetNS00402m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/targetNS/targetNS00402m/targetNS00402m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="targetNS00402m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="targetns00402m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The (top-level) element declaration resolved to by the actual value of the ref attribute. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare one local element that refers to a global one. &#10;                             Check that the element is validated according to the type of &#10;                             the referred element.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/term/term00101m/term00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="term00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/term/term00101m/term00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="term00101m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/term/term00101m/term00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="term00101m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="term00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="General check of the {type definition} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element with a certain type. Ensure&#10;                             the value is validated according to the type.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00101m/typeDef00101m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00101m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00101m/typeDef00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00101m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00101m/typeDef00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00101m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00101m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="simpleType is used to define {type definition} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element with a simpleType. Ensure&#10;                             the value is validated according to the type.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00201m/typeDef00201m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00201m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00201m/typeDef00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00201m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00201m/typeDef00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00201m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00201m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="complexType is used to define {type definition} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element with a complexType. Ensure&#10;                             the value is validated according to the type.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00202m/typeDef00202m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00202m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00202m/typeDef00202m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00202m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00202m/typeDef00202m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00202m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00202m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="type attribute is used to define {type definition} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element by means of type attribute. Ensure&#10;                             the value is validated according to the type.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00203m/typeDef00203m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00203m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00203m/typeDef00203m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00203m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00203m/typeDef00203m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00203m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00203m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="type attribute is used to define {type definition} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element by means of the substitutionGroup &#10;                             attribute. Ensure the value is validated according to &#10;                             the type.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00204m/typeDef00204m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00204m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00204m/typeDef00204m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00204m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00204m/typeDef00204m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00204m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00204m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default type is used to define {type definition} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an element with the default type. Define another &#10;                             element of type anyType. Ensure the anyType element may &#10;                             substitute for the default type one.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00205m/typeDef00205m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00205m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00205m/typeDef00205m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00205m1_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00205m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="The {type definition} property is specified by reference. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare a global element with a certain type. &#10;                             Declare another element. Specify the type by reference. &#10;                             Ensure the value is validated according to the type.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00301m/typeDef00301m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00301m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00301m/typeDef00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00301m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00301m/typeDef00301m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00301m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00301m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Eelements within group. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Eelements within  group  produce either particles which contain &#10;                             global element declarations (if there's a ref attribute) or &#10;                             local declarations otherwise.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00401m/typeDef00401m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00401m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00401m/typeDef00401m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00401m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00401m/typeDef00401m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00401m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00401m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Eelements within complexType. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Eelements within  complexType  produce either particles which contain &#10;                             global element declarations (if there's a ref attribute) or &#10;                             local declarations otherwise.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00402m/typeDef00402m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00402m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00402m/typeDef00402m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00402m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00402m/typeDef00402m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00402m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00402m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Various setting of the {type definition} property. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="For complete declarations, top-level or local, the  type  attribute &#10;                             is used when the declaration can use a built-in or pre-declared type &#10;                             definition. Otherwise an anonymous &lt;simpleType&gt; or &lt;complexType&gt; is &#10;                             provided inline",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00403m/typeDef00403m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00403m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00403m/typeDef00403m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00403m1_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00403m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="complexType and type are mutually exclusive (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element using  type . &#10;                             Declare another element with a  complexType . &#10;                             Ensure the schema is valid",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00501m/typeDef00501m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00501m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00501m/typeDef00501m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00501m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="complexType and type are mutually exclusive (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element using  type . &#10;                             Declare another element with a  complexType . &#10;                             Set  type  attribute of the element. Ensure the schema is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00501m/typeDef00501m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00501m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="typedef00501m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="simpleType and type are mutually exclusive (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element using  type . &#10;                             Declare another element with a  simpleType . &#10;                             Ensure the schema is valid",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00502m/typeDef00502m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00502m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00502m/typeDef00502m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00502m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="simpleType and type are mutually exclusive (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Declare an element using  type . &#10;                             Declare another element with a  simpleType . &#10;                             Set  type  attribute of the element. Ensure the schema is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00502m/typeDef00502m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00502m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="typedef00502m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="a normalized value of the type attribute must be valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Specify a type of an element by means of the  type  attribute &#10;                             set to a value that is not normalized.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00601m/typeDef00601m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00601m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00601m/typeDef00601m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00601m1_p",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00601m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="local name and namespace name of the xsi:type must resolve to a type definition (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Use  xsi:type  attribute &#10;                             set to a value that has both local and namespace names.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00701m/typeDef00701m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00701m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00701m/typeDef00701m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00701m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00701m/typeDef00701m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="typeDef00701m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00701m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="local type definition is validly derived from complexType (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If it is a complex type definition, the  local type definition  &#10;                             must be validly derived from the {type definition} given the union of &#10;                             the {disallowed substitutions} and the {type definition}'s &#10;                             {prohibited substitutions}. &#10;                               In the test the local type definition is validly derived from complexType.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00801m/typeDef00801m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00801m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00801m/typeDef00801m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00801m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="local type is 'prohibited' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If it is a complex type definition, the  local type definition  &#10;                             must be validly derived from the {type definition} given the union of &#10;                             the {disallowed substitutions} and the {type definition}'s &#10;                             {prohibited substitutions}. &#10;                               In the test the local type is 'prohibited'.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00801m/typeDef00801m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00801m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00801m/typeDef00801m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00801m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="local type is 'dissalowed' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If it is a complex type definition, the  local type definition  &#10;                             must be validly derived from the {type definition} given the union of &#10;                             the {disallowed substitutions} and the {type definition}'s &#10;                             {prohibited substitutions}. &#10;                               In the test the local type is 'dissalowed'.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00801m/typeDef00801m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00801m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00801m/typeDef00801m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00801m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="local type definition is validly derived from simpleType (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If it is a simple type definition, the  local type definition  &#10;                             must be validly derived from the {type definition} given the &#10;                             {disallowed substitutions}. &#10;                               In the test the local type definition is validly derived from simpleType.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00802m/typeDef00802m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00802m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00802m/typeDef00802m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00802m/typeDef00802m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00802m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="local type is 'dissalowed' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If it is a simple type definition, the  local type definition  &#10;                             must be validly derived from the {type definition} given the &#10;                             {disallowed substitutions}. &#10;                               In the test the local type is 'dissalowed'.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00802m/typeDef00802m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00802m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00802m/typeDef00802m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00802m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="the element information item must be valid with respect to the actual type definition (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item must be valid with respect to &#10;                             the actual type definition. In the test the actual type definition is &#10;                             a local type definition.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00901m/typeDef00901m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef00901m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00901m/typeDef00901m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef00901m/typeDef00901m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef00901m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="actual type must not be abstract (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="For an element to be locally valid its type must not be  abstract .&#10;                              Negative case uses local type definition with a type that is  abstract .",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01101m/typeDef01101m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef01101m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01101m/typeDef01101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01101m/typeDef01101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef01101m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element of a simple type has schemaLocation, type and nil attributes (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the type definition is a simple type definition, then&#10;                             the element information item's attributes must be empty, &#10;                             excepting those whose namespace name is identical to &#10;                             http://www.w3.org/2001/XMLSchema-instance and whose local name &#10;                             is one of  type ,  nil ,  schemaLocation  or &#10;                              noNamespaceSchemaLocation .&#10;                              The negative case uses an element with an extra attribute.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01201m/typeDef01201m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef01201m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01201m/typeDef01201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01201m/typeDef01201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef01201m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="element of a simple type has noNamespaceSchemaLocation, type and nil attributes (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the type definition is a simple type definition, then&#10;                             the element information item's attributes must be empty, &#10;                             excepting those whose namespace name is identical to &#10;                             http://www.w3.org/2001/XMLSchema-instance and whose local name &#10;                             is one of  type ,  nil ,  schemaLocation  or &#10;                              noNamespaceSchemaLocation .&#10;                              The negative case uses an element with an extra attribute.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01202m/typeDef01202m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef01202m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01202m/typeDef01202m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01202m/typeDef01202m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef01202m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="trying to use element children in the element of a simple type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item must have no element information item children&#10;                             if it has a simple type.&#10;                              Negative case uses an element of type  xsd:anySimpleType  &#10;                             with children elements.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01301m/typeDef01301m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef01301m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01301m/typeDef01301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01301m/typeDef01301m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef01301m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="normalized value must be valid with respect to the type definition (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the element information item of a simple type is not nil, then&#10;                             its normalized value must be valid with respect to the type definition.&#10;                             Negative case uses invalid value.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01401m/typeDef01401m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef01401m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01401m/typeDef01401m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01401m/typeDef01401m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef01401m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="value must be valid with respect to the type definition (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the type definition is a complex type definition, &#10;                             then the element information item must be valid with respect to the &#10;                             type definition.&#10;                             Negative case uses invalid value.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01501m/typeDef01501m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="typeDef01501m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01501m/typeDef01501m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/typeDef/typeDef01501m/typeDef01501m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="typedef01501m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Validation of the default value attribute (positive case). (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an elements with default value defined. Ensure&#10;                             that the value is validated.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00101m/valueConstraint00101m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00101m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00101m/valueConstraint00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00101m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Validation of the default value attribute (negative case). (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an elements with default value defined. Ensure&#10;                             that the value is validated.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00101m/valueConstraint00101m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00101m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00101m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="Validation of the fixed value attribute. (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Define an elements with fixed value defined. Ensure&#10;                             that the value may be empty or, otherwise, must be&#10;                             equal to that defined.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00201m/valueConstraint00201m.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00201m",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00201m/valueConstraint00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="valueConstraint00201m1_p",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00201m/valueConstraint00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="valueConstraint00201m1_n",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00201m",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="only default is present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Define an element. Set default="0".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00301m/valueConstraint00301m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00301m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00301m/valueConstraint00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00301m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="only fixed is present (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Define an element. Set fixed="0".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00301m/valueConstraint00301m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00301m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00301m/valueConstraint00301m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00301m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="both default and fixed have identical values (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Define an element. Set default="0" fixed="0".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00301m/valueConstraint00301m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00301m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00301m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default and fixed have different values 0 and 1 respectively (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Define an element. Set default="0" fixed="1".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00301m/valueConstraint00301m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00301m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00301m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default and fixed have different values 1 and 0 respectively (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Define an element. Set default="1" fixed="0".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00301m/valueConstraint00301m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00301m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00301m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is set for type boolean (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="xsd:boolean" default="true".&#10;                             &#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00401m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00401m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="invalid default value is set for type boolean (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="xsd:boolean" default="Yes".&#10;                             &#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00401m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00401m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is set for ur-type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set default="alpha".&#10;                             &#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00401m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00401m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is set for anyType (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="xsd:anyType" default="alpha".&#10;                             &#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00401m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m4_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00401m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is set for a complex type with a simple content (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="answer" default="true".&#10;                             The content type of type  answer  is  boolean .&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00401m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m5_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00401m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="invalid default value is set for a complex type with a simple content (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="answer" default="Yes".&#10;                             The content type of type  answer  is  boolean .&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00401m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00401m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is set for a simple type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="answer" default="true".&#10;                             The content type of type  answer  allows only "true".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m7.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00401m7",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m7_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00401m7",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="invalid default value is set for a simple type (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="answer" default="false".&#10;                             The content type of type  answer  allows only "true".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m8.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00401m8",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00401m8",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is set for anySimpleType (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="xsd:anySimpleType" default="alpha".&#10;                             &#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m9.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00401m9",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00401m/valueConstraint00401m9_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00401m9",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is set for type boolean (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="xsd:boolean" fixed="true".&#10;                             &#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00402m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00402m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="invalid fixed value is set for type boolean (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="xsd:boolean" fixed="Yes".&#10;                             &#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00402m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00402m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is set for ur-type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set fixed="alpha".&#10;                             &#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00402m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00402m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is set for anyType (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="xsd:anyType" fixed="alpha".&#10;                             &#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00402m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m4_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00402m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is set for a complex type with a simple content (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="answer" fixed="true".&#10;                             The content type of type  answer  is  boolean .&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00402m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m5_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00402m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="invalid fixed value is set for a complex type with a simple content (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="answer" fixed="Yes".&#10;                             The content type of type  answer  is  boolean .&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00402m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00402m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is set for a simple type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="answer" fixed="true".&#10;                             The content type of type  answer  allows only "true".&#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m7.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00402m7",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m7_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00402m7",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="invalid fixed value is set for a simple type (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="answer" fixed="false".&#10;                             The content type of type  answer  allows only "true".&#10;                             Check that the schema is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m8.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00402m8",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00402m8",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is set for anySimpleType (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Set type="xsd:anySimpleType" fixed="alpha".&#10;                             &#10;                             Check that the schema is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m9.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00402m9",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00402m/valueConstraint00402m9_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00402m9",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the declaration has a {value constraint}, &#10;                             the item has neither element nor character [children] and &#10;                              xsi:nil  is not specified, the  actual type definition  &#10;                             is a  local type definition  then the lexical &#10;                             representation of the {value constraint} value &#10;                             must be a valid default for the  actual type definition .&#10;                              In the test the fixed value is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00501m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.QUERIED,
                        date=XmlDate(2007, 1, 4),
                        bugzilla="http://www.w3.org/Bugs/Public/show_bug.cgi?id=4148",
                        other_attributes={}
                    ),
                    prior=[
                        Prior(
                            annotation=[],
                            status=Status.ACCEPTED,
                            date=XmlDate(2005, 6, 21),
                            bugzilla=None,
                            other_attributes={}
                        ),
                    ],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00501m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the declaration has a {value constraint}, &#10;                             the item has neither element nor character [children] and &#10;                              xsi:nil  is not specified, the  actual type definition  &#10;                             is a  local type definition  then the lexical &#10;                             representation of the {value constraint} value &#10;                             must be a valid default for the  actual type definition .&#10;                              In the test the fixed value is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00501m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.QUERIED,
                        date=XmlDate(2007, 1, 4),
                        bugzilla="http://www.w3.org/Bugs/Public/show_bug.cgi?id=4148",
                        other_attributes={}
                    ),
                    prior=[
                        Prior(
                            annotation=[],
                            status=Status.ACCEPTED,
                            date=XmlDate(2005, 6, 21),
                            bugzilla=None,
                            other_attributes={}
                        ),
                    ],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00501m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is invalid for the local type definition (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the declaration has a {value constraint}, &#10;                             the item has neither element nor character [children] and &#10;                              xsi:nil  is not specified, the  actual type definition  &#10;                             is a  local type definition  then the lexical &#10;                             representation of the {value constraint} value &#10;                             must be a valid default for the  actual type definition .&#10;                              In the test the fixed value is invalid for the local type definition.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00501m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m3_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00501m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the declaration has a {value constraint}, &#10;                             the item has neither element nor character [children] and &#10;                              xsi:nil  is not specified, the  actual type definition  &#10;                             is a  local type definition  then the lexical &#10;                             representation of the {value constraint} value &#10;                             must be a valid default for the  actual type definition .&#10;                              In the test the default value is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00501m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m4_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00501m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the declaration has a {value constraint}, &#10;                             the item has neither element nor character [children] and &#10;                              xsi:nil  is not specified, the  actual type definition  &#10;                             is a  local type definition  then the lexical &#10;                             representation of the {value constraint} value &#10;                             must be a valid default for the  actual type definition .&#10;                              In the test the default value is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00501m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m5_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00501m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is invalid for the local type definition (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the declaration has a {value constraint}, &#10;                             the item has neither element nor character [children] and &#10;                              xsi:nil  is not specified, the  actual type definition  &#10;                             is a  local type definition  then the lexical &#10;                             representation of the {value constraint} value &#10;                             must be a valid default for the  actual type definition .&#10;                              In the test the default value is invalid for the local type definition.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00501m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00501m/valueConstraint00501m6_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00501m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value of built-in type is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item with the lexical &#10;                             representation of the {value constraint} value used as &#10;                             its normalized value must be valid with respect to the &#10;                              actual type definition .&#10;                              In the test the fixed value of built-in type is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00601m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00601m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value of built-in type is invalid (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item with the lexical &#10;                             representation of the {value constraint} value used as &#10;                             its normalized value must be valid with respect to the &#10;                              actual type definition .&#10;                              In the test the fixed value of built-in type is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00601m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00601m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value of built-in type is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item with the lexical &#10;                             representation of the {value constraint} value used as &#10;                             its normalized value must be valid with respect to the &#10;                              actual type definition .&#10;                              In the test the default value of built-in type is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00601m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00601m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value of built-in type is invalid (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item with the lexical &#10;                             representation of the {value constraint} value used as &#10;                             its normalized value must be valid with respect to the &#10;                              actual type definition .&#10;                              In the test the default value of built-in type is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00601m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00601m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value of a derived type is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item with the lexical &#10;                             representation of the {value constraint} value used as &#10;                             its normalized value must be valid with respect to the &#10;                              actual type definition .&#10;                              In the test the fixed value of a derived type is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00601m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m5_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00601m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value of a derived type is invalid (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item with the lexical &#10;                             representation of the {value constraint} value used as &#10;                             its normalized value must be valid with respect to the &#10;                              actual type definition .&#10;                              In the test the fixed value of a derived type is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00601m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00601m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value a derived type is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item with the lexical &#10;                             representation of the {value constraint} value used as &#10;                             its normalized value must be valid with respect to the &#10;                              actual type definition .&#10;                              In the test the default value a derived type is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m7.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00601m7",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m7_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00601m7",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value a derived type is invalid (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="The element information item with the lexical &#10;                             representation of the {value constraint} value used as &#10;                             its normalized value must be valid with respect to the &#10;                              actual type definition .&#10;                              In the test the default value a derived type is invalid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00601m/valueConstraint00601m8.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00601m8",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint00601m8",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value constraint forbids element children (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If there is a fixed {value constraint} &#10;                             the element information item must have no element information item children.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00701m/valueConstraint00701m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00701m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00701m/valueConstraint00701m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00701m/valueConstraint00701m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00701m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="value of mixed content type must match the fixed value (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the {content type} of the actual type definition is mixed, &#10;                             then the initial value of the item must match the canonical lexical &#10;                             representation of the {value constraint} value.&#10;                              In the test, the value of the item does not match the&#10;                             specified fixed value.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00801m/valueConstraint00801m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00801m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00801m/valueConstraint00801m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00801m/valueConstraint00801m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00801m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="value of simple content type must match the fixed value (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="If the {content type} of the actual type definition is a simple type &#10;                             definition, then the actual value of the item must match the &#10;                             canonical lexical representation of the {value constraint} value&#10;                              In the test, the value of the item does not match the&#10;                             specified fixed value.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00901m/valueConstraint00901m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint00901m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00901m/valueConstraint00901m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint00901m/valueConstraint00901m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint00901m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="no value constraint with ID type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Specify the following: type="xsd:ID".&#10;                             Check that the declaration is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01001m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint01001m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value constraint with ID type (invalid schema in 1.0, becomes valid in 1.1)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Specify the following: type="xsd:ID" fixed="alpha".&#10;                             Check that the declaration is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="../common/XSD1_1TestCategories.xml#xsd1_1-ID-IDREF-DefaultValsForElemOrAttrOfTypeID",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[
                            KnownToken.VALUE_1_0,
                        ],
                        other_attributes={}
                    ),
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[
                            KnownToken.VALUE_1_1,
                        ],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01001m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint01001m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value constraint with ID type (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Specify the following: type="xsd:ID" default="alpha".&#10;                             Check that the declaration is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="../common/XSD1_1TestCategories.xml#xsd1_1-ID-IDREF-DefaultValsForElemOrAttrOfTypeID",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[
                            KnownToken.VALUE_1_0,
                        ],
                        other_attributes={}
                    ),
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[
                            KnownToken.VALUE_1_1,
                        ],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01001m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint01001m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="no value constraint with a type derived from ID (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Specify the following: type="derivedFromID".&#10;                             Check that the declaration is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01001m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m4_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint01001m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value constraint with a type derived from ID (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Specify the following: type="derivedFromID" fixed="alpha".&#10;                             Check that the declaration is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="../common/XSD1_1TestCategories.xml#xsd1_1-ID-IDREF-DefaultValsForElemOrAttrOfTypeID",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[
                            KnownToken.VALUE_1_0,
                        ],
                        other_attributes={}
                    ),
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[
                            KnownToken.VALUE_1_1,
                        ],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01001m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint01001m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value constraint with a type derived from ID (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Specify the following: type="derivedFromID" default="alpha".&#10;                             Check that the declaration is invalid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="../common/XSD1_1TestCategories.xml#xsd1_1-ID-IDREF-DefaultValsForElemOrAttrOfTypeID",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[
                            KnownToken.VALUE_1_0,
                        ],
                        other_attributes={}
                    ),
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[
                            KnownToken.VALUE_1_1,
                        ],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01001m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="valueconstraint01001m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value constraint with string type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Specify the following: type="xsd:string" fixed="alpha".&#10;                             Check that the declaration is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m7.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01001m7",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m7_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint01001m7",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value constraint with string type (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text='Declare an element. Specify the following: type="xsd:string" default="alpha".&#10;                             Check that the declaration is valid.',
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m8.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01001m8",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01001m/valueConstraint01001m8_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint01001m8",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="For a string to be a valid default with respect to a type definition,&#10;                             if the type definition is a simple type definition, then the &#10;                             string must be valid with respect to that definition.&#10;                              In the test the fixed value is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01101m/valueConstraint01101m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01101m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01101m/valueConstraint01101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint01101m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="fixed value is invalid for the local type definition (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="For a string to be a valid default with respect to a type definition,&#10;                             if the type definition is a simple type definition, then the &#10;                             string must be valid with respect to that definition.&#10;                              In the test the fixed value is invalid for the local type definition.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01101m/valueConstraint01101m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01101m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01101m/valueConstraint01101m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint01101m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is valid (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="For a string to be a valid default with respect to a type definition,&#10;                             if the type definition is a simple type definition, then the &#10;                             string must be valid with respect to that definition.&#10;                              In the test the default value is valid.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01101m/valueConstraint01101m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01101m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01101m/valueConstraint01101m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint01101m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value is invalid for the local type definition (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="For a string to be a valid default with respect to a type definition,&#10;                             if the type definition is a simple type definition, then the &#10;                             string must be valid with respect to that definition.&#10;                              In the test the default value is invalid for the local type definition.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#cElement_Declarations",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01101m/valueConstraint01101m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="valueConstraint01101m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/ElemDecl/valueConstraint/valueConstraint01101m/valueConstraint01101m4_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="valueconstraint01101m4",
            version=[],
            other_attributes={}
        ),
    ],
    contributor="SUN",
    name="ElemDecl",
    version=[],
    other_attributes={
        "{http://www.w3.org/2001/XMLSchema-instance}schemaLocation": "http://www.w3.org/XML/2004/xml-schema-test-suite/ AnnotatedTSSchema.xsd",
    }
)
