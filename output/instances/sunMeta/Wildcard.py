from output.models.common.xsts_xsd.xlink import TypeType
from output.models.common.xsts_xsd.xsts import Annotation
from output.models.common.xsts_xsd.xsts import Current
from output.models.common.xsts_xsd.xsts import Documentation
from output.models.common.xsts_xsd.xsts import DocumentationReference
from output.models.common.xsts_xsd.xsts import Expected
from output.models.common.xsts_xsd.xsts import ExpectedOutcome
from output.models.common.xsts_xsd.xsts import InstanceDocument
from output.models.common.xsts_xsd.xsts import InstanceTest
from output.models.common.xsts_xsd.xsts import SchemaDocument
from output.models.common.xsts_xsd.xsts import SchemaTest
from output.models.common.xsts_xsd.xsts import Status
from output.models.common.xsts_xsd.xsts import TestGroup
from output.models.common.xsts_xsd.xsts import TestSet
from xsdata.formats.dataclass.models.generics import AnyElement
from xsdata.models.datatype import XmlDate


obj = TestSet(
    annotation=[],
    test_group=[
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="human-targeted  annotation for a wildcard schema component (anyAttribute) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the human-targeted annotation &#10;                             is provided for a wildcard schema component (anyAttribute).",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="annotation00101m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="human-targeted double annotation for a wildcard schema component (anyAttribute) (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the human-targeted annotation &#10;                             is provided for a wildcard schema component (anyAttribute).&#10;                             The annotation is specified twice.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="annotation00101m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="machine-targeted  annotation for a wildcard schema component (anyAttribute) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the machine-targeted annotation &#10;                             is provided for a wildcard schema component (anyAttribute).",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m3.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m3",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m3_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="annotation00101m3",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="machine-targeted double annotation for a wildcard schema component (anyAttribute) (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the machine-targeted annotation &#10;                             is provided for a wildcard schema component (anyAttribute).&#10;                             The annotation is specified twice.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m4.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m4",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="annotation00101m4",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="human-targeted  annotation for a wildcard schema component (any) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the human-targeted annotation &#10;                             is provided for a wildcard schema component (any).",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m5.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m5",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m5_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="annotation00101m5",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="human-targeted double annotation for a wildcard schema component (any) (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the human-targeted annotation &#10;                             is provided for a wildcard schema component (any).&#10;                             The annotation is specified twice.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m6.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m6",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="annotation00101m6",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="machine-targeted  annotation for a wildcard schema component (any) (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the machine-targeted annotation &#10;                             is provided for a wildcard schema component (any).",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m7.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m7",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m7_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="annotation00101m7",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="machine-targeted double annotation for a wildcard schema component (any) (invalid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="Annotations provide for human- and machine-targeted &#10;                             annotations of schema components.&#10;                              In the test the machine-targeted annotation &#10;                             is provided for a wildcard schema component (any).&#10;                             The annotation is specified twice.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/annotation/annotation00101m/annotation00101m8.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.INVALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="annotation00101m8",
                version=[],
                other_attributes={}
            ),
            instance_test=[],
            name="annotation00101m8",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="namespace='##any' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{namespace constraint} provides for *validation* of attribute and element items that:&#10;                                1. (any) have any namespace or are not namespace qualified;",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00101m/nsConstraint00101m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nsConstraint00101m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00101m/nsConstraint00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00101m/nsConstraint00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nsconstraint00101m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value of 'namespace' is '##any' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{namespace constraint} provides for *validation* of attribute and element items that:&#10;                                1. (any) have any namespace or are not namespace qualified;",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00101m/nsConstraint00101m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nsConstraint00101m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00101m/nsConstraint00101m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00101m/nsConstraint00101m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nsconstraint00101m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="namespace='##any' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{namespace constraint} provides for *validation* of attribute and element items that:&#10;                                1. (any) have any namespace or are not namespace qualified;",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00102m/nsConstraint00102m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nsConstraint00102m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00102m/nsConstraint00102m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nsconstraint00102m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="default value of 'namespace' is '##any' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{namespace constraint} provides for *validation* of attribute and element items that:&#10;                                1. (any) have any namespace or are not namespace qualified;",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00102m/nsConstraint00102m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nsConstraint00102m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00102m/nsConstraint00102m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nsconstraint00102m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="namespace='##other' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{namespace constraint} provides for *validation* of attribute and element items that:&#10;                                2. (not and a namespace name) have any namespace other than the specified namespace&#10;                                    name;",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00201m/nsConstraint00201m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nsConstraint00201m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00201m/nsConstraint00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00201m/nsConstraint00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nsconstraint00201m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="namespace='##other' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{namespace constraint} provides for *validation* of attribute and element items that:&#10;                                2. (not and a namespace name) have any namespace other than the specified namespace&#10;                                    name;",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00202m/nsConstraint00202m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nsConstraint00202m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00202m/nsConstraint00202m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00202m/nsConstraint00202m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nsconstraint00202m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="namespace='ns_test1 ns_test2' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{namespace constraint} provides for *validation* of attribute and element items that:&#10;                             &#10;                                4. (a set whose members are either namespace names or *absent*) have any of the specified&#10;                                   namespaces and/or, if *absent* is included in the set, are unqualified.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00301m/nsConstraint00301m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nsConstraint00301m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00301m/nsConstraint00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00301m/nsConstraint00301m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nsconstraint00301m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="namespace='ns_test1 ns_test2' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{namespace constraint} provides for *validation* of attribute and element items that:&#10;                             &#10;                                4. (a set whose members are either namespace names or *absent*) have any of the specified&#10;                                   namespaces and/or, if *absent* is included in the set, are unqualified.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00302m/nsConstraint00302m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="nsConstraint00302m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00302m/nsConstraint00302m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/nsConstraint/nsConstraint00302m/nsConstraint00302m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="nsconstraint00302m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='strict' and the declaration is available (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                strict&#10;                                    There must be a top-level declaration for the item available, or the item&#10;                                    must have an xsi:type, and the item must be *valid* as appropriate.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00101m/psContents00101m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00101m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00101m/psContents00101m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00101m/psContents00101m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00101m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='strict' and the declaration is not available (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                strict&#10;                                    There must be a top-level declaration for the item available, or the item&#10;                                    must have an xsi:type, and the item must be *valid* as appropriate.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00101m/psContents00101m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00101m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00101m/psContents00101m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00101m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='strict' and the declaration is available (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                strict&#10;                                    There must be a top-level declaration for the item available, or the item&#10;                                    must have an xsi:type, and the item must be *valid* as appropriate.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00102m/psContents00102m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00102m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00102m/psContents00102m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00102m/psContents00102m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00102m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='strict' and the declaration is not available (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                strict&#10;                                    There must be a top-level declaration for the item available, or the item&#10;                                    must have an xsi:type, and the item must be *valid* as appropriate.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00102m/psContents00102m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00102m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00102m/psContents00102m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00102m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='skip' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                skip&#10;                                    No constraints at all: the item must simply be well-formed XML.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00201m/psContents00201m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00201m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00201m/psContents00201m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00201m/psContents00201m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00201m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='skip' (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                skip&#10;                                    No constraints at all: the item must simply be well-formed XML.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00202m/psContents00202m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00202m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00202m/psContents00202m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00202m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='lax' and the declaration is available (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                lax&#10;                                    If the item, or any items among its [children] if it's an element information&#10;                                    item, has a uniquely determined declaration available, it must be *valid* with&#10;                                    respect to that definition, that is, *validate* where you can, don't worry when you can't.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00301m/psContents00301m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00301m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00301m/psContents00301m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00301m/psContents00301m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00301m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='lax' and the declaration is not available (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                lax&#10;                                    If the item, or any items among its [children] if it's an element information&#10;                                    item, has a uniquely determined declaration available, it must be *valid* with&#10;                                    respect to that definition, that is, *validate* where you can, don't worry when you can't.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00301m/psContents00301m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00301m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00301m/psContents00301m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00301m/psContents00301m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00301m2",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='lax' and the declaration is available (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                lax&#10;                                    If the item, or any items among its [children] if it's an element information&#10;                                    item, has a uniquely determined declaration available, it must be *valid* with&#10;                                    respect to that definition, that is, *validate* where you can, don't worry when you can't.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00302m/psContents00302m1.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00302m1",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00302m/psContents00302m1_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00302m/psContents00302m1_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00302m1",
            version=[],
            other_attributes={}
        ),
        TestGroup(
            annotation=[
                Annotation(
                    appinfo_or_documentation=[
                        Documentation(
                            source=None,
                            lang=None,
                            other_attributes={},
                            content=[
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Title",
                                    text="processContents='lax' and the declaration is not available (valid schema)",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                                AnyElement(
                                    qname="{http://www.w3.org/XML/2004/xml-schema-test-suite/}Description",
                                    text="{process contents} controls the impact on *assessment* of the information items&#10;                              allowed by wildcards, as follows:&#10;                             &#10;                                lax&#10;                                    If the item, or any items among its [children] if it's an element information&#10;                                    item, has a uniquely determined declaration available, it must be *valid* with&#10;                                    respect to that definition, that is, *validate* where you can, don't worry when you can't.",
                                    tail=None,
                                    children=[],
                                    attributes={}
                                ),
                            ]
                        ),
                    ],
                    other_attributes={}
                ),
            ],
            documentation_reference=[
                DocumentationReference(
                    annotation=[],
                    type=TypeType.LOCATOR,
                    href="http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#Wildcards",
                    other_attributes={}
                ),
            ],
            schema_test=SchemaTest(
                annotation=[],
                schema_document=[
                    SchemaDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00302m/psContents00302m2.xsd",
                        other_attributes={}
                    ),
                ],
                expected=[
                    Expected(
                        validity=ExpectedOutcome.VALID,
                        version=[],
                        other_attributes={}
                    ),
                ],
                current=Current(
                    annotation=[],
                    status=Status.ACCEPTED,
                    date=XmlDate(2005, 6, 21),
                    bugzilla=None,
                    other_attributes={}
                ),
                prior=[],
                name="psContents00302m2",
                version=[],
                other_attributes={}
            ),
            instance_test=[
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00302m/psContents00302m2_p.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.VALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Positive",
                    version=[],
                    other_attributes={}
                ),
                InstanceTest(
                    annotation=[],
                    instance_document=InstanceDocument(
                        annotation=[],
                        type=TypeType.LOCATOR,
                        href="../sunData/Wildcard/psContents/psContents00302m/psContents00302m2_n.xml",
                        other_attributes={}
                    ),
                    expected=[
                        Expected(
                            validity=ExpectedOutcome.INVALID,
                            version=[],
                            other_attributes={}
                        ),
                    ],
                    current=Current(
                        annotation=[],
                        status=Status.ACCEPTED,
                        date=XmlDate(2005, 6, 21),
                        bugzilla=None,
                        other_attributes={}
                    ),
                    prior=[],
                    name="Negative",
                    version=[],
                    other_attributes={}
                ),
            ],
            name="pscontents00302m2",
            version=[],
            other_attributes={}
        ),
    ],
    contributor="SUN",
    name="Wildcard",
    version=[],
    other_attributes={
        "{http://www.w3.org/2001/XMLSchema-instance}schemaLocation": "http://www.w3.org/XML/2004/xml-schema-test-suite/ AnnotatedTSSchema.xsd",
    }
)
